{"version":3,"file":"component---src-pages-index-js-2497836a6d6ec6f6cef7.js","mappings":"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","sources":["webpack://gatsby-starter-default/./node_modules/camelcase/index.js","webpack://gatsby-starter-default/../src/image-utils.ts","webpack://gatsby-starter-default/../src/components/hooks.ts","webpack://gatsby-starter-default/../src/components/picture.tsx","webpack://gatsby-starter-default/../src/components/layout-wrapper.tsx","webpack://gatsby-starter-default/../src/components/placeholder.tsx","webpack://gatsby-starter-default/../src/components/main-image.tsx","webpack://gatsby-starter-default/../src/components/gatsby-image.browser.tsx","webpack://gatsby-starter-default/../src/components/gatsby-image.server.tsx","webpack://gatsby-starter-default/../src/components/static-image.server.tsx","webpack://gatsby-starter-default/../src/components/static-image.tsx","webpack://gatsby-starter-default/./src/components/title-text/title-text-styles.js","webpack://gatsby-starter-default/./src/components/title-text/index.js","webpack://gatsby-starter-default/./src/components/title-images/title-images-styles.js","webpack://gatsby-starter-default/./src/components/title-images/index.js","webpack://gatsby-starter-default/./src/components/scroll-down-button/scroll-down-button-styles.js","webpack://gatsby-starter-default/./src/components/scroll-down-button/index.js","webpack://gatsby-starter-default/./src/components/description-text/description-text-styles.js","webpack://gatsby-starter-default/./src/components/description-text/index.js","webpack://gatsby-starter-default/./src/components/about-us-component/about-us-styles.js","webpack://gatsby-starter-default/./src/components/about-us-component/index.js","webpack://gatsby-starter-default/./src/components/about-flutter-component/about-flutter-styles.js","webpack://gatsby-starter-default/./src/components/about-flutter-component/index.js","webpack://gatsby-starter-default/./src/components/about-services-component/about-services-styles.js","webpack://gatsby-starter-default/./src/components/about-services-component/index.js","webpack://gatsby-starter-default/./src/components/want-to-be-client-component/want-to-be-client-styles.js","webpack://gatsby-starter-default/./src/components/want-to-be-client-component/index.js","webpack://gatsby-starter-default/./src/components/index-styles.js","webpack://gatsby-starter-default/./src/pages/index.js"],"sourcesContent":["'use strict';\n\nvar preserveCamelCase = function preserveCamelCase(string) {\n  var isLastCharLower = false;\n  var isLastCharUpper = false;\n  var isLastLastCharUpper = false;\n\n  for (var i = 0; i < string.length; i++) {\n    var character = string[i];\n\n    if (isLastCharLower && /[a-zA-Z]/.test(character) && character.toUpperCase() === character) {\n      string = string.slice(0, i) + '-' + string.slice(i);\n      isLastCharLower = false;\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = true;\n      i++;\n    } else if (isLastCharUpper && isLastLastCharUpper && /[a-zA-Z]/.test(character) && character.toLowerCase() === character) {\n      string = string.slice(0, i - 1) + '-' + string.slice(i - 1);\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = false;\n      isLastCharLower = true;\n    } else {\n      isLastCharLower = character.toLowerCase() === character && character.toUpperCase() !== character;\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = character.toUpperCase() === character && character.toLowerCase() !== character;\n    }\n  }\n\n  return string;\n};\n\nvar camelCase = function camelCase(input, options) {\n  if (!(typeof input === 'string' || Array.isArray(input))) {\n    throw new TypeError('Expected the input to be `string | string[]`');\n  }\n\n  options = Object.assign({\n    pascalCase: false\n  }, options);\n\n  var postProcess = function postProcess(x) {\n    return options.pascalCase ? x.charAt(0).toUpperCase() + x.slice(1) : x;\n  };\n\n  if (Array.isArray(input)) {\n    input = input.map(function (x) {\n      return x.trim();\n    }).filter(function (x) {\n      return x.length;\n    }).join('-');\n  } else {\n    input = input.trim();\n  }\n\n  if (input.length === 0) {\n    return '';\n  }\n\n  if (input.length === 1) {\n    return options.pascalCase ? input.toUpperCase() : input.toLowerCase();\n  }\n\n  var hasUpperCase = input !== input.toLowerCase();\n\n  if (hasUpperCase) {\n    input = preserveCamelCase(input);\n  }\n\n  input = input.replace(/^[_.\\- ]+/, '').toLowerCase().replace(/[_.\\- ]+(\\w|$)/g, function (_, p1) {\n    return p1.toUpperCase();\n  }).replace(/\\d+(\\w|$)/g, function (m) {\n    return m.toUpperCase();\n  });\n  return postProcess(input);\n};\n\nmodule.exports = camelCase; // TODO: Remove this for the next major release\n\nmodule.exports.default = camelCase;","import camelCase from \"camelcase\"\nimport type { IGatsbyImageData } from \"./index\"\n\nconst DEFAULT_PIXEL_DENSITIES = [0.25, 0.5, 1, 2]\nexport const DEFAULT_BREAKPOINTS = [750, 1080, 1366, 1920]\nexport const EVERY_BREAKPOINT = [\n  320, 654, 768, 1024, 1366, 1600, 1920, 2048, 2560, 3440, 3840, 4096,\n]\nconst DEFAULT_FLUID_WIDTH = 800\nconst DEFAULT_FIXED_WIDTH = 800\nconst DEFAULT_ASPECT_RATIO = 4 / 3\n\nexport type Fit = \"cover\" | \"fill\" | \"inside\" | \"outside\" | \"contain\"\n\nexport type Layout = \"fixed\" | \"fullWidth\" | \"constrained\"\nexport type ImageFormat = \"jpg\" | \"png\" | \"webp\" | \"avif\" | \"auto\" | \"\"\n\n/**\n * The minimal required reporter, as we don't want to import it from gatsby-cli\n */\nexport interface IReporter {\n  warn(message: string): void\n}\n\nexport interface ISharpGatsbyImageArgs {\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  placeholder?: \"tracedSVG\" | \"dominantColor\" | \"blurred\" | \"none\"\n  tracedSVGOptions?: Record<string, unknown>\n  width?: number\n  height?: number\n  aspectRatio?: number\n  sizes?: string\n  quality?: number\n  transformOptions?: {\n    fit?: Fit\n    cropFocus?: number | string\n    duotone?: {\n      highlight: string\n      shadow: string\n      opacity?: number\n    }\n    grayscale?: boolean\n    rotate?: number\n    trim?: number\n  }\n  jpgOptions?: Record<string, unknown>\n  pngOptions?: Record<string, unknown>\n  webpOptions?: Record<string, unknown>\n  avifOptions?: Record<string, unknown>\n  blurredOptions?: { width?: number; toFormat?: ImageFormat }\n  breakpoints?: Array<number>\n  outputPixelDensities?: Array<number>\n  backgroundColor?: string\n}\n\nexport interface IImageSizeArgs {\n  width?: number\n  height?: number\n  layout?: Layout\n  filename: string\n  outputPixelDensities?: Array<number>\n  breakpoints?: Array<number>\n  fit?: Fit\n  reporter?: IReporter\n  sourceMetadata: { width: number; height: number }\n}\n\nexport interface IImageSizes {\n  sizes: Array<number>\n  presentationWidth: number\n  presentationHeight: number\n  aspectRatio: number\n  unscaledWidth: number\n}\n\nexport interface IImage {\n  src: string\n  width: number\n  height: number\n  format: ImageFormat\n}\n\nexport interface IGatsbyImageHelperArgs {\n  pluginName: string\n  generateImageSource: (\n    filename: string,\n    width: number,\n    height: number,\n    format: ImageFormat,\n    fit?: Fit,\n    options?: Record<string, unknown>\n  ) => IImage\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  filename: string\n  placeholderURL?: string\n  width?: number\n  height?: number\n  sizes?: string\n  reporter?: IReporter\n  sourceMetadata?: { width: number; height: number; format: ImageFormat }\n  fit?: Fit\n  options?: Record<string, unknown>\n  breakpoints?: Array<number>\n  backgroundColor?: string\n  aspectRatio?: number\n}\n\nconst warn = (message: string): void => console.warn(message)\n\nconst sortNumeric = (a: number, b: number): number => a - b\n\nexport const getSizes = (width: number, layout: Layout): string | undefined => {\n  switch (layout) {\n    // If screen is wider than the max size, image width is the max size,\n    // otherwise it's the width of the screen\n    case `constrained`:\n      return `(min-width: ${width}px) ${width}px, 100vw`\n\n    // Image is always the same width, whatever the size of the screen\n    case `fixed`:\n      return `${width}px`\n\n    // Image is always the width of the screen\n    case `fullWidth`:\n      return `100vw`\n\n    default:\n      return undefined\n  }\n}\n\nexport const getSrcSet = (images: Array<IImage>): string =>\n  images.map(image => `${image.src} ${image.width}w`).join(`,\\n`)\n\nexport function formatFromFilename(filename: string): ImageFormat | undefined {\n  const dot = filename.lastIndexOf(`.`)\n  if (dot !== -1) {\n    const ext = filename.slice(dot + 1)\n    if (ext === `jpeg`) {\n      return `jpg`\n    }\n    if (ext.length === 3 || ext.length === 4) {\n      return ext as ImageFormat\n    }\n  }\n  return undefined\n}\n\nexport function setDefaultDimensions(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageHelperArgs {\n  let {\n    layout = `constrained`,\n    width,\n    height,\n    sourceMetadata,\n    breakpoints,\n    aspectRatio,\n    formats = [`auto`, `webp`],\n  } = args\n  formats = formats.map(format => format.toLowerCase() as ImageFormat)\n  layout = camelCase(layout) as Layout\n\n  if (width && height) {\n    return { ...args, formats, layout, aspectRatio: width / height }\n  }\n  if (sourceMetadata.width && sourceMetadata.height && !aspectRatio) {\n    aspectRatio = sourceMetadata.width / sourceMetadata.height\n  }\n\n  if (layout === `fullWidth`) {\n    width = width || sourceMetadata.width || breakpoints[breakpoints.length - 1]\n    height = height || Math.round(width / (aspectRatio || DEFAULT_ASPECT_RATIO))\n  } else {\n    if (!width) {\n      if (height && aspectRatio) {\n        width = height * aspectRatio\n      } else if (sourceMetadata.width) {\n        width = sourceMetadata.width\n      } else if (height) {\n        width = Math.round(height / DEFAULT_ASPECT_RATIO)\n      } else {\n        width = DEFAULT_FIXED_WIDTH\n      }\n    }\n\n    if (aspectRatio && !height) {\n      height = Math.round(width / aspectRatio)\n    } else if (!aspectRatio) {\n      aspectRatio = width / height\n    }\n  }\n  return { ...args, width, height, aspectRatio, layout, formats }\n}\n\n/**\n * Use this for getting an image for the blurred placeholder. This ensures the\n * aspect ratio and crop match the main image\n */\nexport function getLowResolutionImageURL(\n  args: IGatsbyImageHelperArgs,\n  width = 20\n): string {\n  args = setDefaultDimensions(args)\n  const { generateImageSource, filename, aspectRatio } = args\n  return generateImageSource(\n    filename,\n    width,\n    Math.round(width / aspectRatio),\n    args.sourceMetadata.format || `jpg`,\n    args.fit,\n    args.options\n  )?.src\n}\n\nexport function generateImageData(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageData {\n  args = setDefaultDimensions(args)\n\n  let {\n    pluginName,\n    sourceMetadata,\n    generateImageSource,\n    layout,\n    fit,\n    options,\n    width,\n    height,\n    filename,\n    reporter = { warn },\n    backgroundColor,\n    placeholderURL,\n  } = args\n\n  if (!pluginName) {\n    reporter.warn(\n      `[gatsby-plugin-image] \"generateImageData\" was not passed a plugin name`\n    )\n  }\n\n  if (typeof generateImageSource !== `function`) {\n    throw new Error(`generateImageSource must be a function`)\n  }\n\n  if (!sourceMetadata || (!sourceMetadata.width && !sourceMetadata.height)) {\n    // No metadata means we let the CDN handle max size etc, aspect ratio etc\n    sourceMetadata = {\n      width,\n      height,\n      format: sourceMetadata?.format || formatFromFilename(filename) || `auto`,\n    }\n  } else if (!sourceMetadata.format) {\n    sourceMetadata.format = formatFromFilename(filename)\n  }\n\n  const formats = new Set<ImageFormat>(args.formats)\n\n  if (formats.size === 0 || formats.has(`auto`) || formats.has(``)) {\n    formats.delete(`auto`)\n    formats.delete(``)\n    formats.add(sourceMetadata.format)\n  }\n\n  if (formats.has(`jpg`) && formats.has(`png`)) {\n    reporter.warn(\n      `[${pluginName}] Specifying both 'jpg' and 'png' formats is not supported. Using 'auto' instead`\n    )\n    if (sourceMetadata.format === `jpg`) {\n      formats.delete(`png`)\n    } else {\n      formats.delete(`jpg`)\n    }\n  }\n\n  const imageSizes = calculateImageSizes({ ...args, sourceMetadata })\n\n  const result: IGatsbyImageData[\"images\"] = {\n    sources: [],\n  }\n\n  let sizes = args.sizes\n  if (!sizes) {\n    sizes = getSizes(imageSizes.presentationWidth, layout)\n  }\n\n  formats.forEach(format => {\n    const images = imageSizes.sizes\n      .map(size => {\n        const imageSrc = generateImageSource(\n          filename,\n          size,\n          Math.round(size / imageSizes.aspectRatio),\n          format,\n          fit,\n          options\n        )\n        if (\n          !imageSrc?.width ||\n          !imageSrc.height ||\n          !imageSrc.src ||\n          !imageSrc.format\n        ) {\n          reporter.warn(\n            `[${pluginName}] The resolver for image ${filename} returned an invalid value.`\n          )\n          return undefined\n        }\n        return imageSrc\n      })\n      .filter(Boolean)\n\n    if (format === `jpg` || format === `png` || format === `auto`) {\n      const unscaled =\n        images.find(img => img.width === imageSizes.unscaledWidth) || images[0]\n\n      if (unscaled) {\n        result.fallback = {\n          src: unscaled.src,\n          srcSet: getSrcSet(images),\n          sizes,\n        }\n      }\n    } else {\n      result.sources?.push({\n        srcSet: getSrcSet(images),\n        sizes,\n        type: `image/${format}`,\n      })\n    }\n  })\n\n  const imageProps: Partial<IGatsbyImageData> = {\n    images: result,\n    layout,\n    backgroundColor,\n  }\n\n  if (placeholderURL) {\n    imageProps.placeholder = { fallback: placeholderURL }\n  }\n\n  switch (layout) {\n    case `fixed`:\n      imageProps.width = imageSizes.presentationWidth\n      imageProps.height = imageSizes.presentationHeight\n      break\n\n    case `fullWidth`:\n      imageProps.width = 1\n      imageProps.height = 1 / imageSizes.aspectRatio\n      break\n\n    case `constrained`:\n      imageProps.width = args.width || imageSizes.presentationWidth || 1\n      imageProps.height = (imageProps.width || 1) / imageSizes.aspectRatio\n  }\n\n  return imageProps as IGatsbyImageData\n}\n\nconst dedupeAndSortDensities = (values: Array<number>): Array<number> =>\n  Array.from(new Set([1, ...values])).sort(sortNumeric)\n\nexport function calculateImageSizes(args: IImageSizeArgs): IImageSizes {\n  const {\n    width,\n    height,\n    filename,\n    layout = `constrained`,\n    sourceMetadata: imgDimensions,\n    reporter = { warn },\n    breakpoints = DEFAULT_BREAKPOINTS,\n  } = args\n\n  // check that all dimensions provided are positive\n  const userDimensions = { width, height }\n  const erroneousUserDimensions = Object.entries(userDimensions).filter(\n    ([_, size]) => typeof size === `number` && size < 1\n  )\n  if (erroneousUserDimensions.length) {\n    throw new Error(\n      `Specified dimensions for images must be positive numbers (> 0). Problem dimensions you have are ${erroneousUserDimensions\n        .map(dim => dim.join(`: `))\n        .join(`, `)}`\n    )\n  }\n\n  if (layout === `fixed`) {\n    return fixedImageSizes(args)\n  } else if (layout === `constrained`) {\n    return responsiveImageSizes(args)\n  } else if (layout === `fullWidth`) {\n    return responsiveImageSizes({ breakpoints, ...args })\n  } else {\n    reporter.warn(\n      `No valid layout was provided for the image at ${filename}. Valid image layouts are fixed, fullWidth, and constrained. Found ${layout}`\n    )\n    return {\n      sizes: [imgDimensions.width],\n      presentationWidth: imgDimensions.width,\n      presentationHeight: imgDimensions.height,\n      aspectRatio: imgDimensions.width / imgDimensions.height,\n      unscaledWidth: imgDimensions.width,\n    }\n  }\n}\nexport function fixedImageSizes({\n  filename,\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  reporter = { warn },\n}: IImageSizeArgs): IImageSizes {\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  if (!width) {\n    if (!height) {\n      width = DEFAULT_FIXED_WIDTH\n    } else {\n      width = Math.round(height * aspectRatio)\n    }\n  } else if (!height) {\n    height = Math.round(width / aspectRatio)\n  }\n\n  const originalWidth = width // will use this for presentationWidth, don't want to lose it\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n\n  // If the image is smaller than requested, warn the user that it's being processed as such\n  // print out this message with the necessary information before we overwrite it for sizing\n  if (isTopSizeOverriden) {\n    const fixedDimension = imgDimensions.width < width ? `width` : `height`\n    reporter.warn(`\nThe requested ${fixedDimension} \"${\n      fixedDimension === `width` ? width : height\n    }px\" for the image ${filename} was larger than the actual image ${fixedDimension} of ${\n      imgDimensions[fixedDimension]\n    }px. If possible, replace the current image with a larger one.`)\n\n    if (fixedDimension === `width`) {\n      width = imgDimensions.width\n      height = Math.round(width / aspectRatio)\n    } else {\n      height = imgDimensions.height\n      width = height * aspectRatio\n    }\n  }\n\n  const sizes = densities\n    .filter(size => size >= 1) // remove smaller densities because fixed images don't need them\n    .map(density => Math.round(density * (width as number)))\n    .filter(size => size <= imgDimensions.width)\n\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function responsiveImageSizes({\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  breakpoints,\n  layout,\n}: IImageSizeArgs): IImageSizes {\n  let sizes\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  // Case 1: width of height were passed in, make sure it isn't larger than the actual image\n  width = width && Math.min(width, imgDimensions.width)\n  height = height && Math.min(height, imgDimensions.height)\n\n  // Case 2: neither width or height were passed in, use default size\n  if (!width && !height) {\n    width = Math.min(DEFAULT_FLUID_WIDTH, imgDimensions.width)\n    height = width / aspectRatio\n  }\n\n  // if it still hasn't been found, calculate width from the derived height.\n  // TS isn't smart enough to realise the type for height has been narrowed here\n  if (!width) {\n    width = (height as number) * aspectRatio\n  }\n\n  const originalWidth = width\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n  if (isTopSizeOverriden) {\n    width = imgDimensions.width\n    height = imgDimensions.height\n  }\n\n  width = Math.round(width)\n\n  if (breakpoints?.length > 0) {\n    sizes = breakpoints.filter(size => size <= imgDimensions.width)\n\n    // If a larger breakpoint has been filtered-out, add the actual image width instead\n    if (\n      sizes.length < breakpoints.length &&\n      !sizes.includes(imgDimensions.width)\n    ) {\n      sizes.push(imgDimensions.width)\n    }\n  } else {\n    sizes = densities.map(density => Math.round(density * (width as number)))\n    sizes = sizes.filter(size => size <= imgDimensions.width)\n  }\n\n  // ensure that the size passed in is included in the final output\n  if (layout === `constrained` && !sizes.includes(width)) {\n    sizes.push(width)\n  }\n  sizes = sizes.sort(sortNumeric)\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function getDimensionsAndAspectRatio(\n  dimensions,\n  options\n): { width: number; height: number; aspectRatio: number } {\n  // Calculate the eventual width/height of the image.\n  const imageAspectRatio = dimensions.width / dimensions.height\n\n  let width = options.width\n  let height = options.height\n\n  switch (options.fit) {\n    case `fill`: {\n      width = options.width ? options.width : dimensions.width\n      height = options.height ? options.height : dimensions.height\n      break\n    }\n    case `inside`: {\n      const widthOption = options.width\n        ? options.width\n        : Number.MAX_SAFE_INTEGER\n      const heightOption = options.height\n        ? options.height\n        : Number.MAX_SAFE_INTEGER\n\n      width = Math.min(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.min(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n    case `outside`: {\n      const widthOption = options.width ? options.width : 0\n      const heightOption = options.height ? options.height : 0\n\n      width = Math.max(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.max(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n\n    default: {\n      if (options.width && !options.height) {\n        width = options.width\n        height = Math.round(options.width / imageAspectRatio)\n      }\n\n      if (options.height && !options.width) {\n        width = Math.round(options.height * imageAspectRatio)\n        height = options.height\n      }\n    }\n  }\n\n  return {\n    width,\n    height,\n    aspectRatio: width / height,\n  }\n}\n","/* global GATSBY___IMAGE */\nimport { generateImageData, EVERY_BREAKPOINT } from \"../image-utils\"\nimport type { CSSProperties, HTMLAttributes, ImgHTMLAttributes } from \"react\"\nimport type { Node } from \"gatsby\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { IGatsbyImageData } from \"./gatsby-image.browser\"\nimport type {\n  IGatsbyImageHelperArgs,\n  Layout,\n  IImage,\n  ImageFormat,\n} from \"../image-utils\"\n\n// Native lazy-loading support: https://addyosmani.com/blog/lazy-loading/\nexport const hasNativeLazyLoadSupport = (): boolean =>\n  typeof HTMLImageElement !== `undefined` &&\n  `loading` in HTMLImageElement.prototype\n\nexport function gatsbyImageIsInstalled(): boolean {\n  return typeof GATSBY___IMAGE !== `undefined` && GATSBY___IMAGE\n}\n\nexport type IGatsbyImageDataParent<T = never> = T & {\n  gatsbyImageData: IGatsbyImageData\n}\nexport type IGatsbyImageParent<T = never> = T & {\n  gatsbyImage: IGatsbyImageData\n}\nexport type FileNode = Partial<Node> & {\n  childImageSharp?: IGatsbyImageDataParent<Partial<Node>>\n}\n\nconst isGatsbyImageData = (\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageData | any\n): node is IGatsbyImageData =>\n  // 🦆 check for a deep prop to be sure this is a valid gatsbyImageData object\n  Boolean(node?.images?.fallback?.src)\n\nconst isGatsbyImageDataParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageDataParent<T> | any\n): node is IGatsbyImageDataParent<T> => Boolean(node?.gatsbyImageData)\n\nconst isGatsbyImageParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageParent<T> | any\n): node is IGatsbyImageParent<T> => Boolean(node?.gatsbyImage)\n\nexport type ImageDataLike =\n  | FileNode\n  | IGatsbyImageDataParent\n  | IGatsbyImageParent\n  | IGatsbyImageData\n\nexport const getImage = (\n  node: ImageDataLike | null\n): IGatsbyImageData | undefined => {\n  // This checks both for gatsbyImageData and gatsbyImage\n  if (isGatsbyImageData(node)) {\n    return node\n  }\n  // gatsbyImageData GraphQL field\n  if (isGatsbyImageDataParent(node)) {\n    return node.gatsbyImageData\n  }\n  // gatsbyImage GraphQL field for Gatsby's Image CDN service\n  if (isGatsbyImageParent(node)) {\n    return node.gatsbyImage\n  }\n  return node?.childImageSharp?.gatsbyImageData\n}\n\nexport const getSrc = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.src\n\nexport const getSrcSet = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.srcSet\n\nexport function getWrapperProps(\n  width: number,\n  height: number,\n  layout: Layout\n): Pick<HTMLAttributes<HTMLElement>, \"className\" | \"style\"> & {\n  \"data-gatsby-image-wrapper\": string\n} {\n  const wrapperStyle: CSSProperties = {}\n\n  let className = `gatsby-image-wrapper`\n\n  // If the plugin isn't installed we need to apply the styles inline\n  if (!gatsbyImageIsInstalled()) {\n    wrapperStyle.position = `relative`\n    wrapperStyle.overflow = `hidden`\n  }\n\n  if (layout === `fixed`) {\n    wrapperStyle.width = width\n    wrapperStyle.height = height\n  } else if (layout === `constrained`) {\n    if (!gatsbyImageIsInstalled()) {\n      wrapperStyle.display = `inline-block`\n      wrapperStyle.verticalAlign = `top`\n    }\n    className = `gatsby-image-wrapper gatsby-image-wrapper-constrained`\n  }\n\n  return {\n    className,\n    \"data-gatsby-image-wrapper\": ``,\n    style: wrapperStyle,\n  }\n}\n\nexport interface IUrlBuilderArgs<OptionsType> {\n  width: number\n  height: number\n  baseUrl: string\n  format: ImageFormat\n  options: OptionsType\n}\nexport interface IGetImageDataArgs<OptionsType = Record<string, unknown>> {\n  baseUrl: string\n  /**\n   * For constrained and fixed images, the size of the image element\n   */\n  width?: number\n  height?: number\n  /**\n   * If available, pass the source image width and height\n   */\n  sourceWidth?: number\n  sourceHeight?: number\n  /**\n   * If only one dimension is passed, then this will be used to calculate the other.\n   */\n  aspectRatio?: number\n  layout?: Layout\n  /**\n   * Returns a URL based on the passed arguments. Should be a pure function\n   */\n  urlBuilder: (args: IUrlBuilderArgs<OptionsType>) => string\n\n  /**\n   * Should be a data URI\n   */\n  placeholderURL?: string\n  backgroundColor?: string\n  /**\n   * Used in error messages etc\n   */\n  pluginName?: string\n\n  /**\n   * If you do not support auto-format, pass an array of image types here\n   */\n  formats?: Array<ImageFormat>\n\n  breakpoints?: Array<number>\n\n  /**\n   * Passed to the urlBuilder function\n   */\n  options?: OptionsType\n}\n\n/**\n * Use this hook to generate gatsby-plugin-image data in the browser.\n */\nexport function getImageData<OptionsType>({\n  baseUrl,\n  urlBuilder,\n  sourceWidth,\n  sourceHeight,\n  pluginName = `getImageData`,\n  formats = [`auto`],\n  breakpoints,\n  options,\n  ...props\n}: IGetImageDataArgs<OptionsType>): IGatsbyImageData {\n  if (\n    !breakpoints?.length &&\n    (props.layout === `fullWidth` || (props.layout as string) === `FULL_WIDTH`)\n  ) {\n    breakpoints = EVERY_BREAKPOINT\n  }\n  const generateImageSource = (\n    baseUrl: string,\n    width: number,\n    height?: number,\n    format?: ImageFormat\n  ): IImage => {\n    return {\n      width,\n      height,\n      format,\n      src: urlBuilder({ baseUrl, width, height, options, format }),\n    }\n  }\n\n  const sourceMetadata: IGatsbyImageHelperArgs[\"sourceMetadata\"] = {\n    width: sourceWidth,\n    height: sourceHeight,\n    format: `auto`,\n  }\n\n  const args: IGatsbyImageHelperArgs = {\n    ...props,\n    pluginName,\n    generateImageSource,\n    filename: baseUrl,\n    formats,\n    breakpoints,\n    sourceMetadata,\n  }\n  return generateImageData(args)\n}\n\nexport function getMainProps(\n  isLoading: boolean,\n  isLoaded: boolean,\n  images: IGatsbyImageData[\"images\"],\n  loading?: \"eager\" | \"lazy\",\n  style: CSSProperties = {}\n): Partial<MainImageProps> {\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      transform: `translateZ(0)`,\n      transition: `opacity 250ms linear`,\n      width: `100%`,\n      willChange: `opacity`,\n      ...style,\n    }\n  }\n\n  const result = {\n    ...images,\n    loading,\n    shouldLoad: isLoading,\n    \"data-main-image\": ``,\n    style: {\n      ...style,\n      opacity: isLoaded ? 1 : 0,\n    },\n  }\n\n  return result\n}\n\nexport type PlaceholderImageAttrs = ImgHTMLAttributes<HTMLImageElement> &\n  Pick<PlaceholderProps, \"sources\" | \"fallback\"> & {\n    \"data-placeholder-image\"?: string\n  }\n\nexport function getPlaceholderProps(\n  placeholder: PlaceholderImageAttrs | undefined,\n  isLoaded: boolean,\n  layout: Layout,\n  width?: number,\n  height?: number,\n  backgroundColor?: string,\n  objectFit?: CSSProperties[\"objectFit\"],\n  objectPosition?: CSSProperties[\"objectPosition\"]\n): PlaceholderImageAttrs {\n  const wrapperStyle: CSSProperties = {}\n\n  if (backgroundColor) {\n    wrapperStyle.backgroundColor = backgroundColor\n\n    if (layout === `fixed`) {\n      wrapperStyle.width = width\n      wrapperStyle.height = height\n      wrapperStyle.backgroundColor = backgroundColor\n      wrapperStyle.position = `relative`\n    } else if (layout === `constrained`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    } else if (layout === `fullWidth`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    }\n  }\n\n  if (objectFit) {\n    wrapperStyle.objectFit = objectFit\n  }\n\n  if (objectPosition) {\n    wrapperStyle.objectPosition = objectPosition\n  }\n  const result: PlaceholderImageAttrs = {\n    ...placeholder,\n    \"aria-hidden\": true,\n    \"data-placeholder-image\": ``,\n    style: {\n      opacity: isLoaded ? 0 : 1,\n      transition: `opacity 500ms linear`,\n      ...wrapperStyle,\n    },\n  }\n\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    result.style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      width: `100%`,\n    }\n  }\n\n  return result\n}\n\nexport interface IArtDirectedImage {\n  media: string\n  image: IGatsbyImageData\n}\n\n/**\n * Generate a Gatsby image data object with multiple, art-directed images that display at different\n * resolutions.\n *\n * @param defaultImage The image displayed when no media query matches.\n * It is also used for all other settings applied to the image, such as width, height and layout.\n * You should pass a className to the component with media queries to adjust the size of the container,\n * as this cannot be adjusted automatically.\n * @param artDirected Array of objects which each contains a `media` string which is a media query\n * such as `(min-width: 320px)`, and the image object to use when that query matches.\n */\nexport function withArtDirection(\n  defaultImage: IGatsbyImageData,\n  artDirected: Array<IArtDirectedImage>\n): IGatsbyImageData {\n  const { images, placeholder, ...props } = defaultImage\n  const output: IGatsbyImageData = {\n    ...props,\n    images: {\n      ...images,\n      sources: [],\n    },\n    placeholder: placeholder && {\n      ...placeholder,\n      sources: [],\n    },\n  }\n\n  artDirected.forEach(({ media, image }) => {\n    if (!media) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(\n          \"[gatsby-plugin-image] All art-directed images passed to must have a value set for `media`. Skipping.\"\n        )\n      }\n      return\n    }\n\n    if (\n      image.layout !== defaultImage.layout &&\n      process.env.NODE_ENV === `development`\n    ) {\n      console.warn(\n        `[gatsby-plugin-image] Mismatched image layout: expected \"${defaultImage.layout}\" but received \"${image.layout}\". All art-directed images use the same layout as the default image`\n      )\n    }\n\n    output.images.sources.push(\n      ...image.images.sources.map(source => {\n        return { ...source, media }\n      }),\n      {\n        media,\n        srcSet: image.images.fallback.srcSet,\n      }\n    )\n\n    if (!output.placeholder) {\n      return\n    }\n\n    output.placeholder.sources.push({\n      media,\n      srcSet: image.placeholder.fallback,\n    })\n  })\n  output.images.sources.push(...images.sources)\n  if (placeholder?.sources) {\n    output.placeholder?.sources.push(...placeholder.sources)\n  }\n  return output\n}\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\n\nexport interface IResponsiveImageProps {\n  sizes?: string\n  srcSet: string\n}\n\nexport type SourceProps = IResponsiveImageProps &\n  (\n    | {\n        media: string\n        type?: string\n      }\n    | {\n        media?: string\n        type: string\n      }\n  )\n\ntype FallbackProps = { src: string } & Partial<IResponsiveImageProps>\n\ntype ImageProps = ImgHTMLAttributes<HTMLImageElement> & {\n  src: string\n  alt: string\n  shouldLoad: boolean\n}\n\nexport type PictureProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: FallbackProps\n  sources?: Array<SourceProps>\n  alt: string\n  shouldLoad?: boolean\n}\n\nconst Image: FunctionComponent<ImageProps> = function Image({\n  src,\n  srcSet,\n  loading,\n  alt = ``,\n  shouldLoad,\n  ...props\n}) {\n  return (\n    <img\n      {...props}\n      decoding=\"async\"\n      loading={loading}\n      src={shouldLoad ? src : undefined}\n      data-src={!shouldLoad ? src : undefined}\n      srcSet={shouldLoad ? srcSet : undefined}\n      data-srcset={!shouldLoad ? srcSet : undefined}\n      alt={alt}\n    />\n  )\n}\n\nexport const Picture: React.FC<PictureProps> = function Picture({\n  fallback,\n  sources = [],\n  shouldLoad = true,\n  ...props\n}) {\n  const sizes = props.sizes || fallback?.sizes\n  const fallbackImage = (\n    <Image {...props} {...fallback} sizes={sizes} shouldLoad={shouldLoad} />\n  )\n\n  if (!sources.length) {\n    return fallbackImage\n  }\n\n  return (\n    <picture>\n      {sources.map(({ media, srcSet, type }) => (\n        <source\n          key={`${media}-${type}-${srcSet}`}\n          type={type}\n          media={media}\n          srcSet={shouldLoad ? srcSet : undefined}\n          data-srcset={!shouldLoad ? srcSet : undefined}\n          sizes={sizes}\n        />\n      ))}\n      {fallbackImage}\n    </picture>\n  )\n}\n\nImage.propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired,\n  sizes: PropTypes.string,\n  srcSet: PropTypes.string,\n  shouldLoad: PropTypes.bool,\n}\n\nPicture.displayName = `Picture`\nPicture.propTypes = {\n  alt: PropTypes.string.isRequired,\n  shouldLoad: PropTypes.bool,\n  fallback: PropTypes.exact({\n    src: PropTypes.string.isRequired,\n    srcSet: PropTypes.string,\n    sizes: PropTypes.string,\n  }),\n  sources: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.exact({\n        media: PropTypes.string.isRequired,\n        type: PropTypes.string,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n      PropTypes.exact({\n        media: PropTypes.string,\n        type: PropTypes.string.isRequired,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n    ])\n  ),\n}\n","import React, { Fragment, FunctionComponent } from \"react\"\nimport terserMacro from \"../../macros/terser.macro\"\nimport { Layout } from \"../image-utils\"\n\nexport interface ILayoutWrapperProps {\n  layout: Layout\n  width: number\n  height: number\n}\n\nconst NativeScriptLoading: FunctionComponent = () => (\n  <script\n    type=\"module\"\n    dangerouslySetInnerHTML={{\n      __html: terserMacro`\nconst hasNativeLazyLoadSupport = typeof HTMLImageElement !== \"undefined\" && \"loading\" in HTMLImageElement.prototype;\nif (hasNativeLazyLoadSupport) {\n  const gatsbyImages = document.querySelectorAll('img[data-main-image]');\n  for (let mainImage of gatsbyImages) {\n    if (mainImage.dataset.src) {\n      mainImage.setAttribute('src', mainImage.dataset.src)\n      mainImage.removeAttribute('data-src')\n    }\n    if (mainImage.dataset.srcset) {\n      mainImage.setAttribute('srcset', mainImage.dataset.srcset)\n      mainImage.removeAttribute('data-srcset')\n    }\n\n    const sources = mainImage.parentNode.querySelectorAll('source[data-srcset]');\n    for (let source of sources) {\n      source.setAttribute('srcset', source.dataset.srcset)\n      source.removeAttribute('data-srcset')\n    }\n\n    if (mainImage.complete) {\n      mainImage.style.opacity = 1;\n\n      // also hide the placeholder\n      mainImage.parentNode.parentNode.querySelector('[data-placeholder-image]').style.opacity = 0;\n    }\n  }\n}\n`,\n    }}\n  />\n)\n\nexport function getSizer(\n  layout: Layout,\n  width: number,\n  height: number\n): string {\n  let sizer = ``\n  if (layout === `fullWidth`) {\n    sizer = `<div aria-hidden=\"true\" style=\"padding-top: ${\n      (height / width) * 100\n    }%;\"></div>`\n  }\n\n  if (layout === `constrained`) {\n    sizer = `<div style=\"max-width: ${width}px; display: block;\"><img alt=\"\" role=\"presentation\" aria-hidden=\"true\" src=\"data:image/svg+xml;charset=utf-8,%3Csvg height='${height}' width='${width}' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E\" style=\"max-width: 100%; display: block; position: static;\"></div>`\n  }\n\n  return sizer\n}\n\nconst Sizer: FunctionComponent<ILayoutWrapperProps> = function Sizer({\n  layout,\n  width,\n  height,\n}) {\n  if (layout === `fullWidth`) {\n    return (\n      <div aria-hidden style={{ paddingTop: `${(height / width) * 100}%` }} />\n    )\n  }\n\n  if (layout === `constrained`) {\n    return (\n      <div style={{ maxWidth: width, display: `block` }}>\n        <img\n          alt=\"\"\n          role=\"presentation\"\n          aria-hidden=\"true\"\n          src={`data:image/svg+xml;charset=utf-8,%3Csvg height='${height}' width='${width}' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E`}\n          style={{\n            maxWidth: `100%`,\n            display: `block`,\n            position: `static`,\n          }}\n        />\n      </div>\n    )\n  }\n\n  return null\n}\n\nexport const LayoutWrapper: FunctionComponent<ILayoutWrapperProps> =\n  function LayoutWrapper({ children, ...props }) {\n    return (\n      <Fragment>\n        <Sizer {...props} />\n        {children}\n\n        {SERVER ? <NativeScriptLoading /> : null}\n      </Fragment>\n    )\n  }\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\nimport { Picture, SourceProps } from \"./picture\"\n\nexport type PlaceholderProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: string\n  sources?: Array<SourceProps>\n}\n\nexport const Placeholder: FunctionComponent<PlaceholderProps> =\n  function Placeholder({ fallback, ...props }) {\n    if (fallback) {\n      return (\n        <Picture\n          {...props}\n          fallback={{\n            src: fallback,\n          }}\n          aria-hidden\n          alt=\"\"\n        />\n      )\n    } else {\n      return <div {...props}></div>\n    }\n  }\n\nPlaceholder.displayName = `Placeholder`\nPlaceholder.propTypes = {\n  fallback: PropTypes.string,\n  sources: Picture.propTypes?.sources,\n  alt: function (props, propName, componentName): Error | null {\n    if (!props[propName]) {\n      return null\n    }\n\n    return new Error(\n      `Invalid prop \\`${propName}\\` supplied to \\`${componentName}\\`. Validation failed.`\n    )\n  },\n}\n","import React from \"react\"\nimport { Picture, PictureProps } from \"./picture\"\n\nexport type MainImageProps = PictureProps\n\nexport const MainImage: React.FC<PictureProps> = function MainImage(props) {\n  return (\n    <>\n      <Picture {...props} />\n      <noscript>\n        <Picture {...props} shouldLoad={true} />\n      </noscript>\n    </>\n  )\n}\n\nMainImage.displayName = `MainImage`\nMainImage.propTypes = Picture.propTypes\n","import {\n  createElement,\n  memo,\n  useMemo,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n} from \"react\"\nimport {\n  getWrapperProps,\n  gatsbyImageIsInstalled,\n  hasNativeLazyLoadSupport,\n} from \"./hooks\"\nimport { getSizer } from \"./layout-wrapper\"\nimport { propTypes } from \"./gatsby-image.server\"\nimport type {\n  FC,\n  ElementType,\n  FunctionComponent,\n  ImgHTMLAttributes,\n  CSSProperties,\n  ReactEventHandler,\n} from \"react\"\nimport type { renderImageToString } from \"./lazy-hydrate\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { Layout } from \"../image-utils\"\n\nconst imageCache = new Set<string>()\nlet renderImageToStringPromise\nlet renderImage: typeof renderImageToString | undefined\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface GatsbyImageProps\n  extends Omit<\n    ImgHTMLAttributes<HTMLImageElement>,\n    \"placeholder\" | \"onLoad\" | \"src\" | \"srcSet\" | \"width\" | \"height\"\n  > {\n  alt: string\n  as?: ElementType\n  className?: string\n  class?: string\n  imgClassName?: string\n  image: IGatsbyImageData\n  imgStyle?: CSSProperties\n  backgroundColor?: string\n  objectFit?: CSSProperties[\"objectFit\"]\n  objectPosition?: CSSProperties[\"objectPosition\"]\n  onLoad?: (props: { wasCached: boolean }) => void\n  onError?: ReactEventHandler<HTMLImageElement>\n  onStartLoad?: (props: { wasCached: boolean }) => void\n}\n\nexport interface IGatsbyImageData {\n  layout: Layout\n  width: number\n  height: number\n  backgroundColor?: string\n  images: Pick<MainImageProps, \"sources\" | \"fallback\">\n  placeholder?: Pick<PlaceholderProps, \"sources\" | \"fallback\">\n}\n\nconst GatsbyImageHydrator: FC<GatsbyImageProps> = function GatsbyImageHydrator({\n  as = `div`,\n  image,\n  style,\n  backgroundColor,\n  className,\n  class: preactClass,\n  onStartLoad,\n  onLoad,\n  onError,\n  ...props\n}) {\n  const { width, height, layout } = image\n  const {\n    style: wStyle,\n    className: wClass,\n    ...wrapperProps\n  } = getWrapperProps(width, height, layout)\n  const root = useRef<HTMLElement>()\n  const cacheKey = useMemo(() => JSON.stringify(image.images), [image.images])\n\n  // Preact uses class instead of className so we need to check for both\n  if (preactClass) {\n    className = preactClass\n  }\n\n  const sizer = getSizer(layout, width, height)\n\n  useEffect(() => {\n    if (!renderImageToStringPromise) {\n      renderImageToStringPromise = import(`./lazy-hydrate`).then(\n        ({ renderImageToString, swapPlaceholderImage }) => {\n          renderImage = renderImageToString\n\n          return {\n            renderImageToString,\n            swapPlaceholderImage,\n          }\n        }\n      )\n    }\n\n    // The plugin image component is a bit special where if it's server-side rendered, we add extra script tags to support lazy-loading without\n    // In this case we stop hydration but fire the correct events.\n    const ssrImage = root.current.querySelector(\n      `[data-gatsby-image-ssr]`\n    ) as HTMLImageElement\n    if (ssrImage && hasNativeLazyLoadSupport()) {\n      if (ssrImage.complete) {\n        // Trigger onStartload and onLoad events\n        onStartLoad?.({\n          wasCached: true,\n        })\n        onLoad?.({\n          wasCached: true,\n        })\n\n        // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n        setTimeout(() => {\n          ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n        }, 0)\n      } else {\n        onStartLoad?.({\n          wasCached: true,\n        })\n\n        ssrImage.addEventListener(`load`, function onLoadListener() {\n          ssrImage.removeEventListener(`load`, onLoadListener)\n\n          onLoad?.({\n            wasCached: true,\n          })\n          // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n          setTimeout(() => {\n            ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n          }, 0)\n        })\n      }\n\n      imageCache.add(cacheKey)\n\n      return\n    }\n\n    if (renderImage && imageCache.has(cacheKey)) {\n      return\n    }\n\n    let animationFrame\n    let cleanupCallback\n    renderImageToStringPromise.then(\n      ({ renderImageToString, swapPlaceholderImage }) => {\n        if (!root.current) {\n          return\n        }\n\n        root.current.innerHTML = renderImageToString({\n          isLoading: true,\n          isLoaded: imageCache.has(cacheKey),\n          image,\n          ...props,\n        })\n\n        if (!imageCache.has(cacheKey)) {\n          animationFrame = requestAnimationFrame(() => {\n            if (root.current) {\n              cleanupCallback = swapPlaceholderImage(\n                root.current,\n                cacheKey,\n                imageCache,\n                style,\n                onStartLoad,\n                onLoad,\n                onError\n              )\n            }\n          })\n        }\n      }\n    )\n\n    // eslint-disable-next-line consistent-return\n    return (): void => {\n      if (animationFrame) {\n        cancelAnimationFrame(animationFrame)\n      }\n      if (cleanupCallback) {\n        cleanupCallback()\n      }\n    }\n  }, [image])\n\n  // useLayoutEffect is ran before React commits to the DOM. This allows us to make sure our HTML is using our cached image version\n  useLayoutEffect(() => {\n    if (imageCache.has(cacheKey) && renderImage) {\n      root.current.innerHTML = renderImage({\n        isLoading: imageCache.has(cacheKey),\n        isLoaded: imageCache.has(cacheKey),\n        image,\n        ...props,\n      })\n\n      // Trigger onStartload and onLoad events\n      onStartLoad?.({\n        wasCached: true,\n      })\n      onLoad?.({\n        wasCached: true,\n      })\n    }\n  }, [image])\n\n  // By keeping all props equal React will keep the component in the DOM\n  return createElement(as, {\n    ...wrapperProps,\n    style: {\n      ...wStyle,\n      ...style,\n      backgroundColor,\n    },\n    className: `${wClass}${className ? ` ${className}` : ``}`,\n    ref: root,\n    dangerouslySetInnerHTML: {\n      __html: sizer,\n    },\n    suppressHydrationWarning: true,\n  })\n}\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> = memo(\n  function GatsbyImage(props) {\n    if (!props.image) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(`[gatsby-plugin-image] Missing image prop`)\n      }\n\n      return null\n    }\n\n    if (!gatsbyImageIsInstalled() && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `[gatsby-plugin-image] You're missing out on some cool performance features. Please add \"gatsby-plugin-image\" to your gatsby-config.js`\n      )\n    }\n\n    return createElement(GatsbyImageHydrator, props)\n  }\n)\n\nGatsbyImage.propTypes = propTypes\nGatsbyImage.displayName = `GatsbyImage`\n","import React from \"react\"\nimport { getWrapperProps, getMainProps, getPlaceholderProps } from \"./hooks\"\nimport { Placeholder } from \"./placeholder\"\nimport { MainImage, MainImageProps } from \"./main-image\"\nimport { LayoutWrapper } from \"./layout-wrapper\"\nimport PropTypes from \"prop-types\"\nimport type { FunctionComponent, WeakValidationMap } from \"react\"\nimport type { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\n\nconst removeNewLines = (str: string): string => str.replace(/\\n/g, ``)\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> =\n  function GatsbyImage({\n    as = `div`,\n    className,\n    class: preactClass,\n    style,\n    image,\n    loading = `lazy`,\n    imgClassName,\n    imgStyle,\n    backgroundColor,\n    objectFit,\n    objectPosition,\n    ...props\n  }) {\n    if (!image) {\n      console.warn(`[gatsby-plugin-image] Missing image prop`)\n      return null\n    }\n\n    if (preactClass) {\n      className = preactClass\n    }\n\n    imgStyle = {\n      objectFit,\n      objectPosition,\n      backgroundColor,\n      ...imgStyle,\n    }\n\n    const {\n      width,\n      height,\n      layout,\n      images,\n      placeholder,\n      backgroundColor: placeholderBackgroundColor,\n    } = image\n\n    const {\n      style: wStyle,\n      className: wClass,\n      ...wrapperProps\n    } = getWrapperProps(width, height, layout)\n\n    const cleanedImages: IGatsbyImageData[\"images\"] = {\n      fallback: undefined,\n      sources: [],\n    }\n    if (images.fallback) {\n      cleanedImages.fallback = {\n        ...images.fallback,\n        srcSet: images.fallback.srcSet\n          ? removeNewLines(images.fallback.srcSet)\n          : undefined,\n      }\n    }\n\n    if (images.sources) {\n      cleanedImages.sources = images.sources.map(source => {\n        return {\n          ...source,\n          srcSet: removeNewLines(source.srcSet),\n        }\n      })\n    }\n\n    return React.createElement(\n      as,\n      {\n        ...wrapperProps,\n        style: {\n          ...wStyle,\n          ...style,\n          backgroundColor,\n        },\n        className: `${wClass}${className ? ` ${className}` : ``}`,\n      },\n      <LayoutWrapper layout={layout} width={width} height={height}>\n        <Placeholder\n          {...getPlaceholderProps(\n            placeholder,\n            false,\n            layout,\n            width,\n            height,\n            placeholderBackgroundColor,\n            objectFit,\n            objectPosition\n          )}\n        />\n\n        <MainImage\n          data-gatsby-image-ssr=\"\"\n          className={imgClassName}\n          {...(props as Omit<\n            MainImageProps,\n            \"images\" | \"fallback\" | \"onError\" | \"onLoad\"\n          >)}\n          // When eager is set we want to start the isLoading state on true (we want to load the img without react)\n          {...getMainProps(\n            loading === `eager`,\n            false,\n            cleanedImages,\n            loading,\n            imgStyle\n          )}\n        />\n      </LayoutWrapper>\n    )\n  }\n\nexport const altValidator: PropTypes.Validator<string> = (\n  props: GatsbyImageProps,\n  propName,\n  componentName,\n  ...rest\n): Error | undefined => {\n  if (!props.alt && props.alt !== ``) {\n    return new Error(\n      `The \"alt\" prop is required in ${componentName}. If the image is purely presentational then pass an empty string: e.g. alt=\"\". Learn more: https://a11y-style-guide.com/style-guide/section-media.html`\n    )\n  }\n\n  return PropTypes.string(props, propName, componentName, ...rest)\n}\n\nexport const propTypes = {\n  image: PropTypes.object.isRequired,\n  alt: altValidator,\n} as WeakValidationMap<GatsbyImageProps>\n","import React, { FunctionComponent, ReactElement } from \"react\"\nimport {\n  altValidator,\n  GatsbyImage as GatsbyImageServer,\n} from \"./gatsby-image.server\"\nimport { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\nimport PropTypes from \"prop-types\"\nimport { ISharpGatsbyImageArgs } from \"../image-utils\"\n\nexport interface IStaticImageProps\n  extends Omit<GatsbyImageProps, \"image\">,\n    Omit<ISharpGatsbyImageArgs, \"backgroundColor\"> {\n  src: string\n}\n\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nexport function _getStaticImage(\n  GatsbyImage: FunctionComponent<GatsbyImageProps>\n): React.FC<IStaticImageProps & IPrivateProps> {\n  return function StaticImage({\n    src,\n    __imageData: imageData,\n    __error,\n    // We extract these because they're not meant to be passed-down to GatsbyImage\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    width,\n    height,\n    aspectRatio,\n    tracedSVGOptions,\n    placeholder,\n    formats,\n    quality,\n    transformOptions,\n    jpgOptions,\n    pngOptions,\n    webpOptions,\n    avifOptions,\n    blurredOptions,\n    breakpoints,\n    outputPixelDensities,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    ...props\n  }): ReactElement {\n    if (__error) {\n      console.warn(__error)\n    }\n\n    if (imageData) {\n      return <GatsbyImage image={imageData} {...props} />\n    }\n    console.warn(`Image not loaded`, src)\n    if (!__error && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `Please ensure that \"gatsby-plugin-image\" is included in the plugins array in gatsby-config.js, and that your version of gatsby is at least 2.24.78`\n      )\n    }\n    return null\n  }\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageServer)\n\nconst checkDimensionProps: PropTypes.Validator<number> = (\n  props: IStaticImageProps & IPrivateProps,\n  propName: keyof IStaticImageProps & IPrivateProps,\n  ...rest\n) => {\n  if (\n    props.layout === `fullWidth` &&\n    (propName === `width` || propName === `height`) &&\n    props[propName]\n  ) {\n    return new Error(\n      `\"${propName}\" ${props[propName]} may not be passed when layout is fullWidth.`\n    )\n  }\n  return PropTypes.number(props, propName, ...rest)\n}\n\nconst validLayouts = new Set([`fixed`, `fullWidth`, `constrained`])\n\nexport const propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: altValidator,\n  width: checkDimensionProps,\n  height: checkDimensionProps,\n  sizes: PropTypes.string,\n  layout: (props: IStaticImageProps & IPrivateProps): Error | undefined => {\n    if (props.layout === undefined) {\n      return undefined\n    }\n    if (validLayouts.has(props.layout)) {\n      return undefined\n    }\n\n    return new Error(\n      `Invalid value ${props.layout}\" provided for prop \"layout\". Defaulting to \"constrained\". Valid values are \"fixed\", \"fullWidth\" or \"constrained\".`\n    )\n  },\n}\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","import {\n  GatsbyImage as GatsbyImageBrowser,\n  IGatsbyImageData,\n} from \"./gatsby-image.browser\"\nimport React from \"react\"\nimport {\n  _getStaticImage,\n  propTypes,\n  IStaticImageProps,\n} from \"./static-image.server\"\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageBrowser)\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","// import { Link } from \"gatsby\"\r\nimport styled from \"styled-components\"\r\n\r\nexport const TitleWrapper = styled.div`\r\n  padding-top: 75px;\r\n  position: static;\r\n\r\n  & h1 {\r\n    padding-top: 20px;\r\n    margin-bottom: 40px;\r\n  }\r\n\r\n  @media screen and (max-width: 760px) {\r\n    top: 400px;\r\n  }\r\n\r\n  @media screen and (max-height: 630px) {\r\n    & h1 {\r\n      font-size: 25px;\r\n    }\r\n\r\n    & h2 {\r\n      font-size: 20px;\r\n    }\r\n  }\r\n`\r\n","import React from \"react\"\r\nimport { TitleWrapper } from \"../../components/title-text/title-text-styles\"\r\nimport ActionButtonComponent from \"../action-button\"\r\n\r\nconst TitleTextComponent = () => {\r\n  return (\r\n    <>\r\n      <TitleWrapper>\r\n        <h2>Develop. Maintain. Consult.</h2>\r\n        <h1>\r\n          Flutter Development Experts\r\n          <br />\r\n          for your Start-Up\r\n        </h1>\r\n        <a href=\"#contactUs\">\r\n          <ActionButtonComponent\r\n            onClick={() => console.log(\"click title\")}\r\n            text={\"Let's create it together\"}\r\n          />\r\n        </a>\r\n      </TitleWrapper>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default TitleTextComponent\r\n","// import { Link } from \"gatsby\"\r\nimport styled from \"styled-components\"\r\n\r\nexport const GridContainer = styled.div`\r\n  /* max-width: 960px; */\r\n  z-index: -1;\r\n  top: 200px;\r\n  right: 0px;\r\n  position: absolute;\r\n  padding: 10px;\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr;\r\n  grid-template-rows: 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr;\r\n\r\n  .p1 {\r\n    grid-column: 10/12;\r\n    grid-row: 1/4;\r\n  }\r\n  .p2 {\r\n    grid-column: 12/14;\r\n    grid-row: 2/5;\r\n  }\r\n  .p3 {\r\n    grid-column: 4/6;\r\n    grid-row: 6/9;\r\n  }\r\n  .p4 {\r\n    grid-column: 12/14;\r\n    grid-row: 9/12;\r\n  }\r\n  .p5 {\r\n    grid-column: 12/14;\r\n    grid-row: 5/7;\r\n  }\r\n  .p6 {\r\n    grid-column: 10/12;\r\n    grid-row: 4/7;\r\n  }\r\n  .p7 {\r\n    grid-column: 8/10;\r\n    grid-row: 5/8;\r\n  }\r\n  .p8 {\r\n    grid-column: 1/4;\r\n    grid-row: 8/10;\r\n  }\r\n  .p9 {\r\n    grid-column: 10/13;\r\n    grid-row: 7/9;\r\n  }\r\n  .p10 {\r\n    grid-column: 9/12;\r\n    grid-row: 9/11;\r\n  }\r\n  .p99 {\r\n    grid-column: 6/9;\r\n    grid-row: 8/10;\r\n  }\r\n  .p100 {\r\n    grid-column: 7/10;\r\n    grid-row: 3/5;\r\n  }\r\n  .p13 {\r\n    grid-column: 6/8;\r\n    grid-row: 5/8;\r\n  }\r\n\r\n  @media screen and (max-width: 760px) {\r\n    top: 400px;\r\n  }\r\n\r\n  @media screen and (max-width: 420px) {\r\n    top: 600px;\r\n  }\r\n`\r\n","import React from \"react\"\r\nimport { StaticImage } from \"gatsby-plugin-image\"\r\nimport { GridContainer } from \"./title-images-styles\"\r\n\r\nconst TitleImagesComponent = () => {\r\n  return (\r\n    <>\r\n      <GridContainer>\r\n        <StaticImage className=\"p1\" height={200} src=\"../../images/col5row1.png\" alt=\"c7r1\" />\r\n        <StaticImage className=\"p2\" height={200} src=\"../../images/col2row1.png\" alt=\"c2r1\" />\r\n        <StaticImage className=\"p3\" height={200} src=\"../../images/col6row1.png\" alt=\"c11r1\" />\r\n\r\n        <StaticImage className=\"p4\" height={200} src=\"../../images/col3row1.png\" alt=\"c3r1\" />\r\n        <StaticImage className=\"p5\" height={200} src=\"../../images/col6row2.png\" alt=\"c12r1\" />\r\n        <StaticImage className=\"p6\" height={200} src=\"../../images/col5row2.png\" alt=\"c8r1\" />\r\n        <StaticImage className=\"p7\" height={200} src=\"../../images/col4row2.png\" alt=\"c6r1\"\r\n        />\r\n        <StaticImage className=\"p8\" height={200} src=\"../../images/col1row1.png\" alt=\"c1r1\" />\r\n        <StaticImage className=\"p9\" height={200} src=\"../../images/col5row3.png\" alt=\"c9r1\" />\r\n        <StaticImage className=\"p10\" height={200} src=\"../../images/col5row4.png\" alt=\"c10r1\" />\r\n\r\n        <StaticImage className=\"p99\" height={200} src=\"../../images/col3row2.png\" alt=\"c4r1\" />\r\n        <StaticImage className=\"p100\" height={200} src=\"../../images/col4row1.png\" alt=\"c5r1\" />\r\n\r\n        <StaticImage className=\"p13\" height={200} src=\"../../images/col6row3.png\" alt=\"c13r1\" />\r\n      </GridContainer>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default TitleImagesComponent\r\n","// import { Link } from 'gatsby'\r\nimport styled from \"styled-components\"\r\n\r\nexport const ScrollDownWrapper = styled.div`\r\n  position: absolute;\r\n  bottom: 100px;\r\n  display: flex;\r\n  left: 100;\r\n  align-items: center;\r\n\r\n  @media screen and (max-width: 420px) {\r\n    bottom: 30px;\r\n  }\r\n`\r\n\r\nexport const ScrollDownButton = styled.button`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  height: 41px;\r\n  width: 24px;\r\n  background-color: transparent;\r\n  border: 2px solid var(--color-action);\r\n  border-radius: 20px;\r\n  cursor: pointer;\r\n  outline: none;\r\n\r\n  &:before {\r\n    position: absolute;\r\n    top: 4px;\r\n    left: 12px;\r\n    content: \"\";\r\n    width: 10px;\r\n    height: 10px;\r\n    margin-left: -5px;\r\n    background-color: var(--color-action);\r\n    border-radius: 100%;\r\n    -webkit-animation: scroll_down_btn-animation 2s infinite;\r\n    animation: scroll_down_btn-animation 2s infinite;\r\n    box-sizing: border-box;\r\n  }\r\n\r\n  @keyframes scroll_down_btn-animation {\r\n    0% {\r\n      transform: translate(0, 0);\r\n      opacity: 0;\r\n    }\r\n    40% {\r\n      opacity: 1;\r\n    }\r\n    80% {\r\n      transform: translate(0, 20px);\r\n      opacity: 0;\r\n    }\r\n    100% {\r\n      opacity: 0;\r\n    }\r\n  }\r\n\r\n  @-webkit-keyframes scroll_down_btn-animation {\r\n    0% {\r\n      -webkit-transform: translate(0, 0);\r\n      transform: translate(0, 0);\r\n      opacity: 0;\r\n    }\r\n    40% {\r\n      opacity: 1;\r\n    }\r\n    80% {\r\n      -webkit-transform: translate(0, 20px);\r\n      transform: translate(0, 20px);\r\n      opacity: 0;\r\n    }\r\n    100% {\r\n      opacity: 0;\r\n    }\r\n  }\r\n`\r\n\r\nexport const ScrollDownSpan = styled.span`\r\n  margin-left: 10px;\r\n  font-size: 16px;\r\n  text-transform: uppercase;\r\n`\r\n","import React from \"react\"\r\nimport {\r\n  ScrollDownWrapper,\r\n  ScrollDownButton,\r\n  ScrollDownSpan,\r\n} from \"./scroll-down-button-styles\"\r\n\r\nconst ScrollDownButtonComponent = () => {\r\n  return (\r\n    <>\r\n      <ScrollDownWrapper>\r\n        <a href=\"#aboutUs\">\r\n          <ScrollDownButton />{\" \"}\r\n        </a>\r\n        <ScrollDownSpan>{\"Scrolldown\"}</ScrollDownSpan>\r\n      </ScrollDownWrapper>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ScrollDownButtonComponent\r\n","import styled from 'styled-components';\r\n\r\nexport const DescriptionText = styled.h3`\r\n   font-size: 30px;\r\n   text-align: ${props => props.center ? 'center' : 'left'};\r\n\r\n   @media screen and (max-width: 1024px) {\r\n       font-size: 25px;\r\n    }\r\n\r\n   @media screen and (max-width: 960px) {\r\n       font-size: 20px;\r\n    }\r\n`","\r\nimport React from 'react'\r\nimport { DescriptionText } from './description-text-styles'\r\n\r\nconst DescriptionTextComponent = ({ center, text }) => {\r\n    return (\r\n        <>\r\n            <DescriptionText center={center}>{text}</DescriptionText>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default DescriptionTextComponent","// import { Link } from 'gatsby'\r\nimport styled from \"styled-components\"\r\n\r\nexport const AboutUsGridWrapper = styled.div`\r\n  margin-top: 100px;\r\n`\r\n\r\nexport const AboutUsGridItem = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-around;\r\n  align-items: center;\r\n\r\n  &:not(:first-child) {\r\n    padding-top: 20px;\r\n  }\r\n\r\n  & img {\r\n    border-radius: 10px;\r\n    object-fit: scale-down !important;\r\n  }\r\n\r\n  @media screen and (max-width: 420px) {\r\n    flex-direction: column;\r\n\r\n    & img {\r\n      margin: 20px 0;\r\n    }\r\n  }\r\n`\r\n\r\nexport const AboutUsGridItemText = styled.div`\r\n  max-width: 60%;\r\n\r\n  &:nth-child(even) {\r\n    padding-left: 30px;\r\n  }\r\n\r\n  &:nth-child(odd) {\r\n    padding-right: 30px;\r\n  }\r\n\r\n  @media screen and (max-width: 420px) {\r\n    max-width: 100%;\r\n    &:nth-child(even),\r\n    :nth-child(odd) {\r\n      padding: 0px;\r\n      margin: 20px 0;\r\n    }\r\n  }\r\n`\r\n\r\nexport const AboutUsGridItemTitle = styled.h3`\r\n  font-size: 35px;\r\n  font-weight: 600;\r\n\r\n  @media screen and (max-width: 1024px) {\r\n    font-size: 25px;\r\n  }\r\n\r\n  @media screen and (max-width: 960px) {\r\n    font-size: 20px;\r\n  }\r\n`\r\n\r\nexport const AboutUsGridItemSubtitle = styled.h5`\r\n  padding-top: 30px;\r\n  font-size: 22px;\r\n  font-weight: 300;\r\n\r\n  @media screen and (max-width: 1024px) {\r\n    font-size: 20px;\r\n  }\r\n\r\n  @media screen and (max-width: 960px) {\r\n    font-size: 18px;\r\n  }\r\n`\r\n\r\nexport const AboutUsGridItemUl = styled.ul`\r\n  padding-top: 30px;\r\n  padding-left: 20px;\r\n  margin: 0;\r\n`\r\n\r\nexport const AboutUsGridItemLi = styled.li`\r\n  padding: 0;\r\n  margin: 0;\r\n`\r\n","import React from \"react\"\r\nimport DescriptionTextComponent from \"../description-text\"\r\nimport {\r\n  AboutUsGridWrapper,\r\n  AboutUsGridItem,\r\n  AboutUsGridItemText,\r\n  AboutUsGridItemTitle,\r\n  AboutUsGridItemSubtitle,\r\n  AboutUsGridItemUl,\r\n  AboutUsGridItemLi,\r\n} from \"./about-us-styles\"\r\nimport { StaticImage } from \"gatsby-plugin-image\"\r\n\r\nconst AboutUsComponent = () => {\r\n  return (\r\n    <>\r\n      <div id=\"aboutUs\"></div>\r\n      <DescriptionTextComponent\r\n        id=\"dropdownId1asd\"\r\n        text={\r\n          \"Flutters Agency Ukraine is a leading company in the field of mobile development, which uses the latest approaches and technologies to increase development processes speed and create great applications for several platforms (iOS, Android, Mac, Windows, Linux) using Flutter.\"\r\n        }\r\n      />\r\n      <AboutUsGridWrapper>\r\n        <AboutUsGridItem>\r\n          <AboutUsGridItemText>\r\n            <AboutUsGridItemTitle>\r\n              {\"Cross-platform App Development\"}\r\n            </AboutUsGridItemTitle>\r\n            <AboutUsGridItemSubtitle>\r\n              {\r\n                \"Build your app once, deploy it to any screen — mobile, desktop, web, and more.\"\r\n              }\r\n            </AboutUsGridItemSubtitle>\r\n\r\n            <AboutUsGridItemUl>\r\n              <AboutUsGridItemLi>\r\n                {\" iOS & Android app development  \"}\r\n              </AboutUsGridItemLi>\r\n              <AboutUsGridItemLi>\r\n                {\"macOS & Windows app development\"}\r\n              </AboutUsGridItemLi>\r\n              <AboutUsGridItemLi>\r\n                {\"ChromeOS app development\"}\r\n              </AboutUsGridItemLi>\r\n              <AboutUsGridItemLi>\r\n                {\r\n                  \"Web App Development for all modern browsers (Chrome, Safari, Firefox, Edge, Brave)\"\r\n                }\r\n              </AboutUsGridItemLi>\r\n              <AboutUsGridItemLi>{\"Back-End Development\"}</AboutUsGridItemLi>\r\n            </AboutUsGridItemUl>\r\n          </AboutUsGridItemText>\r\n          <StaticImage\r\n            height={600}\r\n            src=\"../../images/grid-image.png\"\r\n            alt=\"A dinosaur\"\r\n          />\r\n        </AboutUsGridItem>\r\n        <AboutUsGridItem>\r\n          <StaticImage\r\n            height={600}\r\n            src=\"../../images/grid-image.png\"\r\n            alt=\"A dinosaur\"\r\n          />\r\n          <AboutUsGridItemText>\r\n            <AboutUsGridItemTitle>\r\n              {\"Advanced development practices\"}\r\n            </AboutUsGridItemTitle>\r\n            <AboutUsGridItemSubtitle>\r\n              {\r\n                \"We use the best and most modern technologies and approaches to development that accele\"\r\n              }\r\n            </AboutUsGridItemSubtitle>\r\n            <AboutUsGridItemUl>\r\n              <AboutUsGridItemLi>\r\n                {\r\n                  \"Using of ready-to-go app templates to reduce app development time and costs \"\r\n                }\r\n              </AboutUsGridItemLi>\r\n              <AboutUsGridItemLi>\r\n                {\"Writing tests to decrease bugs during development process  \"}\r\n              </AboutUsGridItemLi>\r\n              <AboutUsGridItemLi>\r\n                {\r\n                  \"Working with Agile approach to increase flexibility during development process\"\r\n                }\r\n              </AboutUsGridItemLi>\r\n            </AboutUsGridItemUl>\r\n          </AboutUsGridItemText>\r\n        </AboutUsGridItem>\r\n        <AboutUsGridItem>\r\n          <AboutUsGridItemText>\r\n            <AboutUsGridItemTitle>\r\n              {\r\n                \"Full development lifecycle from design to performance analytics\"\r\n              }\r\n            </AboutUsGridItemTitle>\r\n            <AboutUsGridItemSubtitle>\r\n              {\r\n                \"We provide the full development lifecycle of your product, from working on its design to performance analytics and monitoring user satisfaction with your product.\"\r\n              }\r\n            </AboutUsGridItemSubtitle>\r\n            <AboutUsGridItemUl>\r\n              <AboutUsGridItemLi>\r\n                {\"Stunning app designs, perfect user experiences\"}\r\n              </AboutUsGridItemLi>\r\n              <AboutUsGridItemLi>\r\n                {\"Users needs and market research with prototyping\"}\r\n              </AboutUsGridItemLi>\r\n              <AboutUsGridItemLi>\r\n                {\"Modern animations for your apps\"}\r\n              </AboutUsGridItemLi>\r\n              <AboutUsGridItemLi>\r\n                {\r\n                  \"Back-end development with using modern cloud technologies such as Firebase, AWS, etc\"\r\n                }\r\n              </AboutUsGridItemLi>\r\n              <AboutUsGridItemLi>{\"Back-End Development\"}</AboutUsGridItemLi>\r\n            </AboutUsGridItemUl>\r\n          </AboutUsGridItemText>\r\n          <StaticImage\r\n            height={600}\r\n            src=\"../../images/grid-image.png\"\r\n            alt=\"A dinosaur\"\r\n          />\r\n        </AboutUsGridItem>\r\n      </AboutUsGridWrapper>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default AboutUsComponent\r\n","import styled from \"styled-components\"\r\n\r\nexport const AboutFlutterWrapper = styled.div`\r\n  margin-top: 150px;\r\n`\r\n\r\nexport const AboutFlutterGrid = styled.div`\r\n  padding-top: 150px;\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr;\r\n  grid-row: auto auto;\r\n  grid-column-gap: 60px;\r\n  grid-row-gap: 200px;\r\n\r\n  @media screen and (max-width: 1000px) {\r\n    grid-row-gap: 100px;\r\n  }\r\n`\r\n\r\nexport const AboutFlutterGridItem = styled.div``\r\n\r\nexport const AboutFlutterGridItemTitle = styled.h4`\r\n  font-size: 35px;\r\n  font-weight: 500;\r\n\r\n  @media screen and (max-width: 1024px) {\r\n    font-size: 30px;\r\n  }\r\n\r\n  @media screen and (max-width: 960px) {\r\n    font-size: 20px;\r\n  }\r\n`\r\n\r\nexport const AboutFlutterGridItemText = styled.p`\r\n  padding-top: 20px;\r\n`\r\n","import React from \"react\"\r\nimport DescriptionTextComponent from \"../description-text\"\r\nimport {\r\n  AboutFlutterWrapper,\r\n  AboutFlutterGrid,\r\n  AboutFlutterGridItem,\r\n  AboutFlutterGridItemTitle,\r\n  AboutFlutterGridItemText,\r\n} from \"./about-flutter-styles\"\r\n\r\nconst AboutFlutterComponent = () => {\r\n  return (\r\n    <>\r\n      <div id=\"aboutFlutter\"></div>\r\n      <AboutFlutterWrapper>\r\n        <DescriptionTextComponent\r\n          text={\r\n            \"Flutter transforms the app development process. Build, test, and deploy beautiful mobile, web, desktop, and embedded apps from a single codebase.\"\r\n          }\r\n        />\r\n        <AboutFlutterGrid>\r\n          <AboutFlutterGridItem>\r\n            <AboutFlutterGridItemTitle>\r\n              {\"Loved by developers 💙\"}\r\n            </AboutFlutterGridItemTitle>\r\n            <AboutFlutterGridItemText>\r\n              {\r\n                \"Overall, 92% of respondents were somewhat satisfied or very satisfied with Flutter.\"\r\n              }\r\n            </AboutFlutterGridItemText>\r\n          </AboutFlutterGridItem>\r\n          <AboutFlutterGridItem>\r\n            <AboutFlutterGridItemTitle>\r\n              {\"Flutter is fast 🔥\"}\r\n            </AboutFlutterGridItemTitle>\r\n            <AboutFlutterGridItemText>\r\n              {\r\n                \"Flutter code compiles to ARM or Intel machine code as well as JavaScript, for fast performance on any device.\"\r\n              }\r\n            </AboutFlutterGridItemText>\r\n          </AboutFlutterGridItem>\r\n          <AboutFlutterGridItem>\r\n            <AboutFlutterGridItemTitle>\r\n              {\"Dart language 🐦\"}\r\n            </AboutFlutterGridItemTitle>\r\n            <AboutFlutterGridItemText>\r\n              {\r\n                \"Flutter is powered by Dart, a language optimized for fast apps on any platform.\"\r\n              }\r\n            </AboutFlutterGridItemText>\r\n          </AboutFlutterGridItem>\r\n          <AboutFlutterGridItem>\r\n            <AboutFlutterGridItemTitle>\r\n              {\"Wide application 📱\"}\r\n            </AboutFlutterGridItemTitle>\r\n            <AboutFlutterGridItemText>\r\n              {\"Good both for small MVP's and huge scalable apps.\"}\r\n            </AboutFlutterGridItemText>\r\n          </AboutFlutterGridItem>\r\n        </AboutFlutterGrid>\r\n      </AboutFlutterWrapper>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default AboutFlutterComponent\r\n","import styled from \"styled-components\"\r\n\r\nexport const AboutServicesWrapper = styled.div`\r\n  padding-top: 200px;\r\n  height: 100%;\r\n`\r\nexport const AboutServicesList = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: stretch;\r\n  vertical-align: middle;\r\n  height: 100%;\r\n  margin-top: 80px;\r\n\r\n  @media screen and (max-width: 420px) {\r\n    flex-direction: column;\r\n  }\r\n`\r\nexport const AboutServicesListItem = styled.div`\r\n  flex: 1;\r\n  border: 1px solid var(--color-action);\r\n  border-radius: 10px;\r\n  padding: 35px 15px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-content: center;\r\n  flex-direction: column;\r\n\r\n  &:not(:first-child) {\r\n    margin-left: 20px;\r\n  }\r\n\r\n  & a {\r\n    text-decoration: none;\r\n    outline: none;\r\n    color: black;\r\n  }\r\n\r\n  @media screen and (max-width: 420px) {\r\n    &:not(:first-child) {\r\n      margin: 0;\r\n      margin-top: 30px;\r\n    }\r\n  }\r\n`\r\nexport const AboutServicesListItemText = styled.div`\r\n  text-align: center;\r\n  font-size: 22px;\r\n\r\n  @media screen and (max-width: 1024px) {\r\n    font-size: 18px;\r\n  }\r\n\r\n  @media screen and (max-width: 960px) {\r\n    font-size: 16px;\r\n  }\r\n`\r\n","import React from \"react\"\r\nimport DescriptionTextComponent from \"../description-text\"\r\nimport {\r\n  AboutServicesWrapper,\r\n  AboutServicesList,\r\n  AboutServicesListItem,\r\n  AboutServicesListItemText,\r\n} from \"./about-services-styles\"\r\n\r\nconst AboutServicesComponent = () => {\r\n  return (\r\n    <>\r\n      <div id=\"aboutServices\"></div>\r\n      <AboutServicesWrapper>\r\n        <DescriptionTextComponent\r\n          center={true}\r\n          text={\"Turn your ideas into a wonderful app that we will make\"}\r\n        />\r\n        <AboutServicesList>\r\n          <AboutServicesListItem>\r\n            <a href=\"#contactUs\">\r\n              <AboutServicesListItemText>\r\n                {\"Development Consulting\"}\r\n              </AboutServicesListItemText>\r\n            </a>\r\n          </AboutServicesListItem>\r\n          <AboutServicesListItem>\r\n            <a href=\"#contactUs\">\r\n              <AboutServicesListItemText>\r\n                {\"App Development\"}\r\n              </AboutServicesListItemText>\r\n            </a>\r\n          </AboutServicesListItem>\r\n          <AboutServicesListItem>\r\n            <a href=\"#contactUs\">\r\n              <AboutServicesListItemText>\r\n                {\"App Technology Migration to Flutter\"}\r\n              </AboutServicesListItemText>\r\n            </a>\r\n          </AboutServicesListItem>\r\n        </AboutServicesList>\r\n      </AboutServicesWrapper>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default AboutServicesComponent\r\n","import styled from \"styled-components\"\r\n\r\nexport const GridContainer = styled.div`\r\n  overflow-x: hidden;\r\n  margin-top: 150px;\r\n  padding: 0 10px;\r\n  display: grid;\r\n  grid-gap: 5px;\r\n  grid-template-columns: 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr;\r\n  grid-template-rows: 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr;\r\n\r\n  & * {\r\n    border-radius: 10px;\r\n    /* object-fit: contain !important; */\r\n  }\r\n\r\n  //1st row\r\n  .p1 {\r\n    grid-column: 3/6;\r\n    grid-row: 2/5;\r\n  }\r\n\r\n  .p2 {\r\n    grid-column: 6/9;\r\n    grid-row: 3/5;\r\n  }\r\n  .p3 {\r\n    grid-column: 9/12;\r\n    grid-row: 2/5;\r\n  }\r\n  .p4 {\r\n    grid-column: 12/15;\r\n    grid-row: 3/5;\r\n  }\r\n  .p5 {\r\n    grid-column: 15/18;\r\n    grid-row: 2/5;\r\n  }\r\n\r\n  //2nd row\r\n  .p6 {\r\n    grid-column: 1/4;\r\n    grid-row: 5/7;\r\n  }\r\n  .p7 {\r\n    grid-column: 4/7;\r\n    grid-row: 5/8;\r\n  }\r\n  .p8 {\r\n    grid-column: 13/16;\r\n    grid-row: 5/9;\r\n  }\r\n  .p9 {\r\n    grid-column: 16/19;\r\n    grid-row: 5/8;\r\n  }\r\n\r\n  //3rd row\r\n  .p10 {\r\n    grid-column: 2/4;\r\n    grid-row: 7/10;\r\n  }\r\n  .p11 {\r\n    grid-column: 4/8;\r\n    grid-row: 8/11;\r\n  }\r\n  .p12 {\r\n    grid-column: 8/10;\r\n    grid-row: 7/10;\r\n  }\r\n  .p13 {\r\n    grid-column: 10/13;\r\n    grid-row: 7/9;\r\n  }\r\n  .p14 {\r\n    grid-column: 13/16;\r\n    grid-row: 9/12;\r\n  }\r\n  .p15 {\r\n    grid-column: 16/19;\r\n    grid-row: 8/10;\r\n  }\r\n\r\n  @media screen and (max-width: 500px) {\r\n    grid-template-columns: 1fr;\r\n\r\n    grid-template-rows: 1fr;\r\n    & img {\r\n      max-height: 100px;\r\n    }\r\n  }\r\n`\r\n\r\nexport const ActionTextWrapper = styled.div`\r\n  border-radius: 10px;\r\n  border: 1px solid var(--color-action);\r\n  grid-column: 7/13;\r\n  grid-row: 5/7;\r\n  display: flex;\r\n  flex: 1;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  vertical-align: middle;\r\n  height: 100%;\r\n  padding: 30px 10px;\r\n`\r\n\r\nexport const ActionText = styled.span`\r\n  width: 100%;\r\n  vertical-align: middle;\r\n  text-align: center;\r\n  font-size: 25px;\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n\r\n  & a {\r\n    text-decoration: none;\r\n    outline: none;\r\n    color: black;\r\n  }\r\n\r\n  @media screen and (max-width: 1024px) {\r\n    font-size: 20px;\r\n  }\r\n`\r\n","import React from \"react\"\r\nimport { StaticImage } from \"gatsby-plugin-image\"\r\nimport {\r\n  GridContainer,\r\n  ActionTextWrapper,\r\n  ActionText,\r\n} from \"../want-to-be-client-component/want-to-be-client-styles\"\r\n\r\nconst WantToBeClientComponent = () => {\r\n  return (\r\n    <>\r\n      <GridContainer>\r\n        <StaticImage\r\n          className=\"p1\"\r\n          src=\"../../images/row1col1.png\"\r\n          alt=\"c7r1\"\r\n        />\r\n        <StaticImage\r\n          className=\"p2\"\r\n          src=\"../../images/row1col2.png\"\r\n          alt=\"c7r1\"\r\n        />\r\n        <StaticImage\r\n          className=\"p3\"\r\n          src=\"../../images/row1col3.png\"\r\n          alt=\"c7r1\"\r\n        />\r\n        <StaticImage\r\n          className=\"p4\"\r\n          src=\"../../images/row1col4.png\"\r\n          alt=\"c7r1\"\r\n        />\r\n        <StaticImage\r\n          className=\"p5\"\r\n          src=\"../../images/row1col5.png\"\r\n          alt=\"c7r1\"\r\n        />\r\n\r\n        <StaticImage\r\n          className=\"p6\"\r\n          src=\"../../images/row2col1.png\"\r\n          alt=\"c7r1\"\r\n        />\r\n        <StaticImage\r\n          className=\"p7\"\r\n          src=\"../../images/row2col2.png\"\r\n          alt=\"c7r1\"\r\n        />\r\n\r\n        <ActionTextWrapper>\r\n          <ActionText>\r\n            <a href=\"#contactUs\">{\"Want to be our client?\"}</a>\r\n          </ActionText>\r\n        </ActionTextWrapper>\r\n\r\n        <StaticImage\r\n          className=\"p8\"\r\n          src=\"../../images/row2col3.png\"\r\n          alt=\"c7r1\"\r\n        />\r\n        <StaticImage\r\n          className=\"p9\"\r\n          src=\"../../images/row2col4.png\"\r\n          alt=\"c7r1\"\r\n        />\r\n\r\n        <StaticImage\r\n          className=\"p10\"\r\n          src=\"../../images/row3col1.png\"\r\n          alt=\"c7r1\"\r\n        />\r\n        <StaticImage\r\n          className=\"p11\"\r\n          src=\"../../images/row3col2.png\"\r\n          alt=\"c7r1\"\r\n        />\r\n        <StaticImage\r\n          className=\"p12\"\r\n          src=\"../../images/row3col3.png\"\r\n          alt=\"c7r1\"\r\n        />\r\n        <StaticImage\r\n          className=\"p13\"\r\n          src=\"../../images/row3col4.png\"\r\n          alt=\"c7r1\"\r\n        />\r\n        <StaticImage\r\n          className=\"p14\"\r\n          src=\"../../images/row3col5.png\"\r\n          alt=\"c7r1\"\r\n        />\r\n        <StaticImage\r\n          className=\"p15\"\r\n          src=\"../../images/row3col6.png\"\r\n          alt=\"c7r1\"\r\n        />\r\n      </GridContainer>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default WantToBeClientComponent\r\n","// import { Link } from \"gatsby\"\r\nimport styled from \"styled-components\"\r\n\r\nexport const FullScreenBlock = styled.div`\r\n  height: 100vh;\r\n  margin-bottom: 100px;\r\n  min-height: 1300px;\r\n`\r\n\r\n//note: footer has own padding\r\nexport const PaddingWrappper = styled.div`\r\n  padding: 0 110px;\r\n\r\n  @media screen and (max-width: 960px) {\r\n    padding: 0 50px;\r\n  }\r\n`\r\n","import * as React from \"react\"\r\n// import { Link } from \"gatsby\"\r\n// import { StaticImage } from \"gatsby-plugin-image\"\r\n\r\nimport Layout from \"../components/layout\"\r\nimport Seo from \"../components/seo\"\r\n\r\nimport TitleTextComponent from '../components/title-text'\r\nimport TitleImagesComponent from \"../components/title-images\"\r\nimport ScrollDownButtonComponent from '../components/scroll-down-button'\r\nimport AboutUsComponent from '../components/about-us-component'\r\nimport AboutFlutterComponent from '../components/about-flutter-component'\r\nimport AboutServicesComponent from '../components/about-services-component'\r\nimport WantToBeClientComponent from '../components/want-to-be-client-component'\r\nimport { FullScreenBlock, PaddingWrappper, } from '../components/index-styles'\r\n// import * as styles from \"../components/index.module.css\"\r\n\r\n// const links = [\r\n//   {\r\n//     text: \"Tutorial\",\r\n//     url: \"https://www.gatsbyjs.com/docs/tutorial\",\r\n//     description:\r\n//       \"A great place to get started if you're new to web development. Designed to guide you through setting up your first Gatsby site.\",\r\n//   },\r\n//   {\r\n//     text: \"Examples\",\r\n//     url: \"https://github.com/gatsbyjs/gatsby/tree/master/examples\",\r\n//     description:\r\n//       \"A collection of websites ranging from very basic to complex/complete that illustrate how to accomplish specific tasks within your Gatsby sites.\",\r\n//   },\r\n//   {\r\n//     text: \"Plugin Library\",\r\n//     url: \"https://www.gatsbyjs.com/plugins\",\r\n//     description:\r\n//       \"Learn how to add functionality and customize your Gatsby site or app with thousands of plugins built by our amazing developer community.\",\r\n//   },\r\n//   {\r\n//     text: \"Build and Host\",\r\n//     url: \"https://www.gatsbyjs.com/cloud\",\r\n//     description:\r\n//       \"Now you’re ready to show the world! Give your Gatsby site superpowers: Build and host on Gatsby Cloud. Get started for free!\",\r\n//   },\r\n// ]\r\n\r\n// const samplePageLinks = [\r\n//   {\r\n//     text: \"Page 2\",\r\n//     url: \"page-2\",\r\n//     badge: false,\r\n//     description:\r\n//       \"A simple example of linking to another page within a Gatsby site\",\r\n//   },\r\n//   { text: \"TypeScript\", url: \"using-typescript\" },\r\n//   { text: \"Server Side Rendering\", url: \"using-ssr\" },\r\n//   { text: \"Deferred Static Generation\", url: \"using-dsg\" },\r\n// ]\r\n\r\n// const moreLinks = [\r\n//   { text: \"Join us on Discord\", url: \"https://gatsby.dev/discord\" },\r\n//   {\r\n//     text: \"Documentation\",\r\n//     url: \"https://gatsbyjs.com/docs/\",\r\n//   },\r\n//   {\r\n//     text: \"Starters\",\r\n//     url: \"https://gatsbyjs.com/starters/\",ну я \r\n//   },\r\n//   {\r\n//     text: \"Showcase\",\r\n//     url: \"https://gatsbyjs.com/showcase/\",\r\n//   },\r\n//   {\r\n//     text: \"Contributing\",\r\n//     url: \"https://www.gatsbyjs.com/contributing/\",\r\n//   },\r\n//   { text: \"Issues\", url: \"https://github.com/gatsbyjs/gatsby/issues\" },\r\n// ]\r\n\r\n// const utmParameters = `?utm_source=starter&utm_medium=start-page&utm_campaign=default-starter`\r\n\r\nconst IndexPage = () => {\r\n  return (\r\n    <>\r\n      <Layout>\r\n        <Seo title=\"Flutter Development Team for Your Startup or Company\" />\r\n        <PaddingWrappper>\r\n          <FullScreenBlock>\r\n            <TitleTextComponent />\r\n            <TitleImagesComponent />\r\n          </FullScreenBlock>\r\n          <AboutUsComponent />\r\n          <AboutFlutterComponent />\r\n          <AboutServicesComponent />\r\n        </PaddingWrappper>\r\n        <WantToBeClientComponent />\r\n\r\n\r\n        <PaddingWrappper>\r\n          <ScrollDownButtonComponent />\r\n        </PaddingWrappper>\r\n\r\n        {/* <div className={styles.textCenter}>\r\n        <StaticImage\r\n          src=\"../images/example.png\"\r\n          loading=\"eager\"\r\n          width={64}\r\n          quality={95}\r\n          formats={[\"auto\", \"webp\", \"avif\"]}\r\n          alt=\"\"\r\n          style={{ marginBottom: `var(--space-3)` }}\r\n        />\r\n        <h1>\r\n          Welcome to <b>Gatsby!</b>\r\n        </h1>\r\n        <p className={styles.intro}>\r\n          <b>Example pages:</b>{\" \"}\r\n          {samplePageLinks.map((link, i) => (\r\n            <React.Fragment key={link.url}>\r\n              <Link to={link.url}>{link.text}</Link>\r\n              {i !== samplePageLinks.length - 1 && <> · </>}\r\n            </React.Fragment>\r\n          ))}\r\n          <br />\r\n          Edit <code>src/pages/index.js</code> to update this page.\r\n        </p>\r\n      </div>\r\n      <ul className={styles.list}>\r\n        {links.map(link => (\r\n          <li key={link.url} className={styles.listItem}>\r\n            <a\r\n              className={styles.listItemLink}\r\n              href={`${link.url}${utmParameters}`}\r\n            >\r\n              {link.text} ↗\r\n            </a>\r\n            <p className={styles.listItemDescription}>{link.description}</p>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n      {moreLinks.map((link, i) => (\r\n        <React.Fragment key={link.url}>\r\n          <a href={`${link.url}${utmParameters}`}>{link.text}</a>\r\n          {i !== moreLinks.length - 1 && <> · </>}\r\n        </React.Fragment>\r\n      ))}  */}\r\n      </Layout>\r\n    </>\r\n  )\r\n}\r\n\r\nexport const Head = () => <Seo title=\"Flutters Ukraine is a leading development company that highly focused on Flutter and cross-platform development\" />\r\n\r\nexport default IndexPage\r\n"],"names":["camelCase","input","options","Array","isArray","TypeError","Object","assign","pascalCase","x","map","trim","filter","length","join","toUpperCase","toLowerCase","string","isLastCharLower","isLastCharUpper","isLastLastCharUpper","i","character","test","slice","preserveCamelCase","replace","_","p1","m","charAt","module","exports","height","prototype","format","isLoading","isLoaded","images","loading","style","shouldLoad","opacity","placeholder","layout","width","backgroundColor","objectFit","objectPosition","wrapperStyle","position","top","left","bottom","right","transition","sources","fallbackImage","paddingTop","maxWidth","display","React","alt","role","src","children","props","Fragment","Sizer","q","P","H","srcSet","decoding","undefined","fallback","t","sizes","Image","media","type","key","propTypes","PropTypes","Picture","displayName","isRequired","e","Placeholder","_Picture$propTypes","propName","componentName","MainImage","rest","image","altValidator","Set","onError","as","className","preactClass","class","onStartLoad","onLoad","overflow","getWrapperProps","wStyle","wClass","wrapperProps","useRef","useMemo","JSON","stringify","sizer","getSizer","useEffect","renderImageToStringPromise","import","then","renderImageToString","swapPlaceholderImage","renderImage","root","current","querySelector","ssrImage","hasNativeLazyLoadSupport","complete","wasCached","setTimeout","removeAttribute","addEventListener","removeEventListener","onLoadListener","imageCache","add","cacheKey","has","innerHTML","animationFrame","requestAnimationFrame","cleanupCallback","cancelAnimationFrame","useLayoutEffect","ref","dangerouslySetInnerHTML","__html","suppressHydrationWarning","ae","memo","warn","GatsbyImageHydrator","GatsbyImage","se","checkDimensionProps","validLayouts","Error","GatsbyImageBrowser","__error","imageData","__imageData","console","StaticImage","TitleWrapper","styled","href","onClick","log","text","GridContainer","S","ScrollDownWrapper","ScrollDownButton","ScrollDownSpan","DescriptionText","center","AboutUsGridWrapper","AboutUsGridItem","AboutUsGridItemText","AboutUsGridItemTitle","AboutUsGridItemSubtitle","AboutUsGridItemUl","AboutUsGridItemLi","id","AboutFlutterWrapper","AboutFlutterGrid","AboutFlutterGridItem","AboutFlutterGridItemTitle","AboutFlutterGridItemText","AboutServicesWrapper","AboutServicesList","AboutServicesListItem","AboutServicesListItemText","ActionTextWrapper","ActionText","FullScreenBlock","PaddingWrappper","Head","title"],"sourceRoot":""}